

;----------------------------------------------------------------------------------------------------
;
;	APP do cronometro
;
;----------------------------------------------------------------------------------------------------
;

;------------------------------------------------------------------------------
; Endereços das várias áreas do boot e do PP
;------------------------------------------------------------------------------
_INICIO:	equ	h0100		; início do programa de aplicação

_AVR:		equ	h8000

_ARI:		equ	h8100

_ATI:		equ	h8400

_APR:		equ	hFF80
_IOAREA16:	equ	hFF80		; area de perifericos, acessada na base 16 bits
_IOAREA08:	equ	hFFC0		; area de perifericos, acessada na base 8 bits

;
;------------------------------------------------------------------------------
;	Área reservada para os periféricos
;------------------------------------------------------------------------------

; Acesso em 16 bits
	org	_IOAREA16
	daw	[31]
IVET:	dw	0		; Vetor de interrupção

; Acesso em 8 bits
	org	_IOAREA08
	dab	[23]	
TIMDT:	db	0		; Registro de programação do timer
INTS:	db	0		; INTERRUPT STATUS: IP x x x . x x IPStec IPStim
INTE:	db	0		; INTERRUPT ENABLE: IE x x x . x x IEStec IEStim
TECST:	db	0		; Status do teclado
TECDT:	db	0		; Dado do teclado
VISOR:	dab	[36]		; Portas de acesso ao visor


;
;----------------------------------------------------------------------------------------------------
;	Funções usadas para ler/escrever no relógio
;----------------------------------------------------------------------------------------------------
_ROTINAS:	equ	h0080
SET_TIME:	equ	0
GET_TIME:	equ	1


;
;------------------------------------------------------------------------------
;	Variáveis de comunicação entre o programa principal e a rotina de atendimento de interrupções
;------------------------------------------------------------------------------
	org	_AVR
HORA:	DW	0
MINUTO:	DW	0
SEGUNDO:DW	0	
TECLA:	DW	0


;
;----------------------------------------------------------------------------------------------------
;	Aplicação de exemplo
;----------------------------------------------------------------------------------------------------
	org	_INICIO
	
	desloc: db h29 	;;Local a inserir o novo digito, nao pode apagar se for 29 e nem adicionar se for 32 **************************
;;	**************************** ACHAR A PORRA DO DESLOCAMENTO E SETAR O VALOR PARA ALGO QUE FAÇA SENTIDO

	
	mov #'I', VISOR
	mov #'n', VISOR+1
	mov #'f', VISOR+2
	mov #'o', VISOR+3
	mov #'r', VISOR+4
	mov #'m', VISOR+5
	mov #'e', VISOR+6
	mov #' ', VISOR+7
	mov #'h', VISOR+8
	mov #'o', VISOR+9
	mov #'r', VISOR+10
	mov #'a', VISOR+11
	mov #' ', VISOR+12
	mov #'i', VISOR+13
	mov #'n', VISOR+14
	mov #'i', VISOR+15
	mov #'c', VISOR+16
	mov #'i', VISOR+17
	mov #'a', VISOR+18
	mov #'l', VISOR+19
	mov #' ', VISOR+20
	mov #'(', VISOR+21
	mov #'H', VISOR+22
	mov #'H', VISOR+23
	mov #'M', VISOR+24
	mov #'M', VISOR+25
	mov #')', VISOR+26
	mov #':', VISOR+27
	mov #' ', VISOR+28
	mov #'_', VISOR+29
	

	mov desloc, r4	;; SALVANDO A VARIAVEL DESLOCAMENTO EM R4 **************************************************
;;Loop da entrada de dados
Loop:
	mov TECLA, r5	;; Coloca a tecla no r5 para testar seu valor
	bpl TemTecla	;; Se o numero nao for negativo quer dizer que eh um dado relevante
	jmp Loop
	

TemTecla:
	cmp r5, #8 		;; Compara a tecla em r5 com h0008 que equivale a tecla backspace
	beq TrataBackspace	;; Se nao for igual a zero vai pro teste que ve se eh enter
	cmp r5, #h000D		;; Compara a tecla em r5 com h000D - a tecla ENTER
	beq TrataEnter
	jmp TestaNumero		;; Testa se a entrada eh um numero e depois volta para o loop esperando input


TrataBackspace:
	cmp #29, desloc
	bne EhBackspace
	jmp FimTecla ;;Se o desloc estiver na posicao 29, vai para o fim do tratamento de tecla, ie, ignora o backspace
EhBackspace:
	;;Aqui apaga a ultima tecla digitada
	mov #0, desloc  	;;apaga 
	dec desloc		;;subtrai 1 de desloc
	mov #'_', desloc	;;coloca o '_' na nova posicao de desloc
	jmp FimTecla		;;da um jump pro fim do tratamento de tecla

;-------------------------------------------------------------------------------------------------------------------------------------
;;Testando se é enter e se a entrada é valida
TrataEnter:
	cmp #32, desloc		;;Confere se tem 4 digitos na entrada
	bne InputCurto		;;Se desloc != 32 entao nao tem 4 digitos na entrada ou seja vai pra uma funcao que avisa disso *************************************
	
	;;Aqui comeca a funcao que avalia o erro do input
	cmp #0, VISOR+29	;; testa o horario (pois sao 2 bits)? *******************************************************************
	bge SemErroHorario
	jmp ErroHorario		;;imprime mensagem de erro no horario
SemErroHorario:
	cmp #23, VISOR+29	
	bge SemErroHorario2
	jmp ErroHorario		;;imprime mensagem de erro no horario
	
SemErroHorario2:
	cmp #0, VISOR+31	;;testa os minutos ************************************
	bge SemErroMinuto
	jmp ErroMinuto		;;imprime mensagem de erro no horario
SemErroMinuto:
	cmp #59, VISOR+31
	bge SemErroMinuto2
	jmp ErroMinuto		;;imprime mensagem de erro no horario
SemErroMinuto2:

	jmp InputCerto		;; Se passou por todos os começa o cronometro mesmo ******************************************************************

InputCurto:
	mov #'t', VISOR
	mov #'e', VISOR+1
	mov #'m', VISOR+2
	mov #'p', VISOR+3
	mov #'o', VISOR+4
	mov #' ', VISOR+5
	mov #'i', VISOR+6
	mov #'n', VISOR+7
	mov #'i', VISOR+8
	mov #'c', VISOR+9
	mov #'i', VISOR+10
	mov #'a', VISOR+11
	mov #'l', VISOR+12
	mov #' ', VISOR+13
	mov #'i', VISOR+14
	mov #'n', VISOR+15
	mov #'c', VISOR+16
	mov #'o', VISOR+17
	mov #'m', VISOR+18
	mov #'p', VISOR+19
	mov #'l', VISOR+20
	mov #'e', VISOR+21
	mov #'t', VISOR+22
	mov #'o', VISOR+23
	mov #' ', VISOR+24
	mov #' ', VISOR+25
	mov #' ', VISOR+26
	mov #' ', VISOR+27
	mov #' ', VISOR+28
	mov #' ', VISOR+29


ErroHorario:
	mov #'H', VISOR
	mov #'o', VISOR+1
	mov #'r', VISOR+2
	mov #'a', VISOR+3
	mov #'r', VISOR+4
	mov #'i', VISOR+5
	mov #'o', VISOR+6
	mov #' ', VISOR+7
	mov #'i', VISOR+8
	mov #'n', VISOR+9
	mov #'v', VISOR+10
	mov #'a', VISOR+11
	mov #'l', VISOR+12
	mov #'i', VISOR+13
	mov #'d', VISOR+14
	mov #'o', VISOR+15
	mov #' ', VISOR+16
	mov #' ', VISOR+17
	mov #' ', VISOR+18
	mov #' ', VISOR+19
	mov #' ', VISOR+20
	mov #' ', VISOR+21
	mov #' ', VISOR+22
	mov #' ', VISOR+23
	mov #' ', VISOR+24
	mov #' ', VISOR+25
	mov #' ', VISOR+26
	mov #' ', VISOR+27
	mov #' ', VISOR+28
	mov #' ', VISOR+29

	jmp LoopReset		;;loop que fica aguardando o usuario digitar enter

ErroMinuto:
	mov #'M', VISOR
	mov #'i', VISOR+1
	mov #'n', VISOR+2
	mov #'u', VISOR+3
	mov #'t', VISOR+4
	mov #'o', VISOR+5
	mov #' ', VISOR+6
	mov #'i', VISOR+7
	mov #'n', VISOR+8
	mov #'v', VISOR+9
	mov #'a', VISOR+10
	mov #'l', VISOR+11
	mov #'i', VISOR+12
	mov #'d', VISOR+13
	mov #'o', VISOR+14
	mov #' ', VISOR+15
	mov #' ', VISOR+16
	mov #' ', VISOR+17
	mov #' ', VISOR+18
	mov #' ', VISOR+19
	mov #' ', VISOR+20
	mov #' ', VISOR+21
	mov #' ', VISOR+22
	mov #' ', VISOR+23
	mov #' ', VISOR+24
	mov #' ', VISOR+25
	mov #' ', VISOR+26
	mov #' ', VISOR+27
	mov #' ', VISOR+28
	mov #' ', VISOR+29


	;;loop que fica aguardando o usuario digitar enter
LoopReset:
	mov TECLA, r5	;; Coloca a tecla no r5 para testar seu valor
	cmp r5, #h000D	;; Compara a tecla em r5 com h000D - a tecla ENTER
	beq Reseta
	jmp LoopReset

Reseta:	jmp _INICIO 	;; Volta para o começo do programa

;-------------------------------------------------------------------------------------------------------------------------------------

TestaNumero:
	
	;Comeca testando se esta entre 0-9
	cmp r5, #h30
	bmi FimTecla	;; Se for negativo quer dizer que eh < 0, portanto deve ignorar
	cmp #h39, r5	
	bmi FimTecla	;; Se for negativo quer dizer que eh > 9, portanto deve ignorar

	;Agora testa se ja tem 4 digitos no visor
	cmp #32, desloc	;;Confere se tem 4 digitos na entrada
	beq FimTecla	;;Se ja tiver 4 digitos ele simplesmente ignora a entrada de outro

	;Finalmente, insere a tecla depois de todos os teste
	mov r5, VISOR(r4)	;;Coloca a tecla na posicao atual do desloc *************VISOR+desloc = 00 for some fucking reason
	inc desloc		;;incrementa o deslocamento
	mov #'_', VISOR(r4)	;;coloca '_' na outra posicao ******************************TESTAR SAPORRA AQUI DEPOIS********************************************

	jmp FimTecla ;********************** A PRINCIPIO NAO PRECISA DISSO POIS VAI CAIR DIRETO NO FIM DO TECLA MAS VOU DEIXAR POR MOTIVOS LOGICOS NA CONSTRUCAO
	

FimTecla: 
	mov #-1, TECLA	;;Coloca -1 na tecla??
	jmp Loop	;;Volta pro loop de input	

	;*****AQUI EH ONDE O VALOR DE TECLA SERA RESETADO PARA UM NUMERO NEGATIVO PARA FAZER COM QUE A INTERRUPCAO FUNCIONE CORRETAMENTE
	 ;*****DEPOIS FAZER UM JMP PRO LOOP

InputCerto: 
	;*****COMECAR ISSO LIMPANDO A TECLA TBM, ASSIM COMO NO FIM TECLA	




